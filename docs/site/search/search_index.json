{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GPopt | Star Welcome to GPopt 's website. GPopt does Bayesian optimization using Gaussian Process regression Installing 1st method : by using pip at the command line for the stable version pip install mlsauce Quickstart Bayesian Optimization with GPopt Bayesian Optimization with GPopt Part 2 (save and resume) Hyperparameters tuning with GPopt Documentation The documentation can be found (work in progress) here . Contributing Want to contribute to mlsauce 's development on Github, read this !","title":"Home"},{"location":"#gpopt-star","text":"Welcome to GPopt 's website. GPopt does Bayesian optimization using Gaussian Process regression","title":"GPopt | Star"},{"location":"#installing","text":"1st method : by using pip at the command line for the stable version pip install mlsauce","title":"Installing"},{"location":"#quickstart","text":"Bayesian Optimization with GPopt Bayesian Optimization with GPopt Part 2 (save and resume) Hyperparameters tuning with GPopt","title":"Quickstart"},{"location":"#documentation","text":"The documentation can be found (work in progress) here .","title":"Documentation"},{"location":"#contributing","text":"Want to contribute to mlsauce 's development on Github, read this !","title":"Contributing"},{"location":"CONTRIBUTING/","text":"GPopt 's Code of Conduct 1. Purpose A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone. 2. Open [Source/Culture/Tech] Citizenship A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society. 3. Expected Behavior The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants. 4. Unacceptable Behavior The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior. 5. Consequences of Unacceptable Behavior Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning. 6. Scope We expect all contributors to abide by this Code of Conduct in all venues, online and in-person. 7. Contact info thierry.moudiki AT gmail.com 8. License and attribution Portions of text derived from the Citizen Code of Conduct .","title":"Contributing"},{"location":"CONTRIBUTING/#gpopts-code-of-conduct","text":"","title":"GPopt's Code of Conduct"},{"location":"CONTRIBUTING/#1-purpose","text":"A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone.","title":"1. Purpose"},{"location":"CONTRIBUTING/#2-open-sourceculturetech-citizenship","text":"A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.","title":"2. Open [Source/Culture/Tech] Citizenship"},{"location":"CONTRIBUTING/#3-expected-behavior","text":"The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants.","title":"3. Expected Behavior"},{"location":"CONTRIBUTING/#4-unacceptable-behavior","text":"The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior.","title":"4. Unacceptable Behavior"},{"location":"CONTRIBUTING/#5-consequences-of-unacceptable-behavior","text":"Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning.","title":"5. Consequences of Unacceptable Behavior"},{"location":"CONTRIBUTING/#6-scope","text":"We expect all contributors to abide by this Code of Conduct in all venues, online and in-person.","title":"6. Scope"},{"location":"CONTRIBUTING/#7-contact-info","text":"thierry.moudiki AT gmail.com","title":"7. Contact info"},{"location":"CONTRIBUTING/#8-license-and-attribution","text":"Portions of text derived from the Citizen Code of Conduct .","title":"8. License and attribution"},{"location":"LICENSE/","text":"The Clear BSD License Copyright (c) [2019] [Thierry Moudiki] All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"documentation/gpopt/","text":"GPopt Bayesian optimization using Gaussian Process Regression GPOpt GPopt.GPOpt.GPOpt.GPOpt( lower_bound, upper_bound, objective_func=None, x_init=None, y_init=None, n_init=10, n_choices=25000, n_iter=190, alpha=1e-06, n_restarts_optimizer=25, seed=123, save=None, n_jobs=1, per_second=False, log_scale=False, ) Class GPOpt. Arguments: lower_bound: a numpy array; lower bound for researched minimum upper_bound: a numpy array; upper bound for researched minimum objective_func: a function; the objective function to be minimized x_init: initial setting of points where objective_func is evaluated (optional) y_init: initial setting values at points where objective_func is evaluated (optional) n_init: an integer; number of points in the initial setting, when x_init and y_init are not provided n_choices: an integer; number of points for the calculation of expected improvement n_iter: an integer; number of iterations of the minimization algorithm alpha: a float; Value added to the diagonal of the kernel matrix during fitting (for Matern 5/2 kernel) n_restarts_optimizer: an integer; The number of restarts of the optimizer for finding the kernel\u2019s parameters which maximize the log-marginal likelihood. seed: an integer; reproducibility seed save: a string; Specifies where to save the optimizer in its current state n_jobs: an integer; number of jobs for parallel computing on initial setting (can be -1) per_second: a boolean; experimental , default is False (leave to default for now) log_scale: a boolean; experimental , default is False (leave to default for now) see also Bayesian Optimization with GPopt and Hyperparameters tuning with GPopt optimize GPOpt.optimize(verbose=1, n_more_iter=None, abs_tol=None, min_budget=50, func_args=None) Launch optimization loop. Arguments: verbose: an integer; verbose = 0: nothing is printed, verbose = 1: a progress bar is printed (longer than 0), verbose = 2: information about each iteration is printed (longer than 1) n_more_iter: an integer; additional number of iterations for the optimizer (which has been run once) abs_tol: a float; tolerance for convergence of the optimizer (early stopping based on expected improvement) min_budget: an integer (default is 50); minimum number of iterations before early stopping controlled by abs_tol func_args: a list; additional parameters for the objective function (if necessary) see also Bayesian Optimization with GPopt and Hyperparameters tuning with GPopt load GPOpt.load(path) load data from stored shelve. Arguments path : a string; path to stored shelve. See also: Bayesian Optimization with GPopt Part 2 (save and resume) close_shelve GPOpt.close_shelve() Close shelve. Arguments No argument. See also: Bayesian Optimization with GPopt Part 2 (save and resume)","title":"GPopt"},{"location":"documentation/gpopt/#gpopt","text":"Bayesian optimization using Gaussian Process Regression","title":"GPopt"},{"location":"documentation/gpopt/#gpopt_1","text":"GPopt.GPOpt.GPOpt.GPOpt( lower_bound, upper_bound, objective_func=None, x_init=None, y_init=None, n_init=10, n_choices=25000, n_iter=190, alpha=1e-06, n_restarts_optimizer=25, seed=123, save=None, n_jobs=1, per_second=False, log_scale=False, ) Class GPOpt. Arguments: lower_bound: a numpy array; lower bound for researched minimum upper_bound: a numpy array; upper bound for researched minimum objective_func: a function; the objective function to be minimized x_init: initial setting of points where objective_func is evaluated (optional) y_init: initial setting values at points where objective_func is evaluated (optional) n_init: an integer; number of points in the initial setting, when x_init and y_init are not provided n_choices: an integer; number of points for the calculation of expected improvement n_iter: an integer; number of iterations of the minimization algorithm alpha: a float; Value added to the diagonal of the kernel matrix during fitting (for Matern 5/2 kernel) n_restarts_optimizer: an integer; The number of restarts of the optimizer for finding the kernel\u2019s parameters which maximize the log-marginal likelihood. seed: an integer; reproducibility seed save: a string; Specifies where to save the optimizer in its current state n_jobs: an integer; number of jobs for parallel computing on initial setting (can be -1) per_second: a boolean; experimental , default is False (leave to default for now) log_scale: a boolean; experimental , default is False (leave to default for now) see also Bayesian Optimization with GPopt and Hyperparameters tuning with GPopt","title":"GPOpt"},{"location":"documentation/gpopt/#optimize","text":"GPOpt.optimize(verbose=1, n_more_iter=None, abs_tol=None, min_budget=50, func_args=None) Launch optimization loop. Arguments: verbose: an integer; verbose = 0: nothing is printed, verbose = 1: a progress bar is printed (longer than 0), verbose = 2: information about each iteration is printed (longer than 1) n_more_iter: an integer; additional number of iterations for the optimizer (which has been run once) abs_tol: a float; tolerance for convergence of the optimizer (early stopping based on expected improvement) min_budget: an integer (default is 50); minimum number of iterations before early stopping controlled by abs_tol func_args: a list; additional parameters for the objective function (if necessary) see also Bayesian Optimization with GPopt and Hyperparameters tuning with GPopt","title":"optimize"},{"location":"documentation/gpopt/#load","text":"GPOpt.load(path) load data from stored shelve. Arguments path : a string; path to stored shelve. See also: Bayesian Optimization with GPopt Part 2 (save and resume)","title":"load"},{"location":"documentation/gpopt/#close_shelve","text":"GPOpt.close_shelve() Close shelve. Arguments No argument. See also: Bayesian Optimization with GPopt Part 2 (save and resume)","title":"close_shelve"}]}